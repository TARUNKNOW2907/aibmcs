# -*- coding: utf-8 -*-
"""linear_regression_house_price_prediction.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HhrGPK-aYjfXnaw1JW6GgBRMBiX-wtHy
"""

import streamlit as st
from joblib import load
import numpy as np

# Load the model
model = load('linear_regression_model.joblib')

# Create a simple user input
user_input = st.number_input('Enter house size:', min_value=100, max_value=10000, step=50)

# Reshape the input for the model
input_array = np.array([user_input]).reshape(-1, 1)

# Predict the house price
if st.button('Predict Price'):
    predicted_price = model.predict(input_array)
    st.write(f"The predicted house price is: ${predicted_price[0]:.2f}")


import numpy as np                                         #complete this
from sklearn.model_selection import train_test_split             #complete this
from sklearn.linear_model import LinearRegression               #complete this
from sklearn.metrics import mean_squared_error                     #complete this

# Sample dataset: house sizes and number of bedrooms as features, and prices as the target variable
house_sizes = np.array([550, 600, 650, 700, 750, 800, 850, 900, 950, 1000])
num_bedrooms = np.array([1, 2, 2, 3, 3, 3, 4, 4, 4, 5])                   #complete this
prices = np.array([300000, 410000, 530000, 510000, 540000, 610000, 730000, 760000, 830000, 860000])         #complete this


import matplotlib.pyplot as plt           #complete this
from mpl_toolkits.mplot3d import Axes3D     #complete this

# Create a 3D scatter plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')                       #complete this

# Scatter plot points with house_sizes and num_bedrooms as X and Y, and prices as Z
ax.scatter(house_sizes, num_bedrooms, prices, c='blue', marker='o')           #complete this

# Labels for axes
ax.set_xlabel('House Size') #complete this
ax.set_ylabel('Number of Bedrooms') #complete this
ax.set_zlabel('Price') #complete this

# Add dotted lines from data points to respective values on X and Y axes
for i in range(len(house_sizes)):
    ax.plot([house_sizes[i], house_sizes[i]], [num_bedrooms[i], num_bedrooms[i]], [0, prices[i]], c='gray', linestyle='dotted', alpha=0.5)
    ax.plot([house_sizes[i], house_sizes[i]], [0, num_bedrooms[i]], [prices[i], prices[i]], c='gray', linestyle='dotted', alpha=0.5)
    ax.plot([0, house_sizes[i]], [num_bedrooms[i], num_bedrooms[i]], [prices[i], prices[i]], c='gray', linestyle='dotted', alpha=0.5)

plt.title('House Prices vs. House Sizes and Number of Bedrooms')
plt.show()



